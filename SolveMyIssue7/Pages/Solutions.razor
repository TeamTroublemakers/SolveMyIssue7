@page "/solution/{issueId}"
@using MongoDB.Bson
@using SolveMyIssue7.Common.Interfaces
@using SolveMyIssue7.DataAccess.Models
@using SolveMyIssue7.DataAccess.Services
@using SolveMyIssue7.DataAccess.Services.Interfaces
@inject IIssueRepository IssueRepository
@inject ISolutionRepository SolutionRepository
@inject NavigationManager NavManager

<div style="margin-top:10vh;" class="container">
<h3 style="opacity:0.8">Solutions</h3>

@* <h1>Solutions</h1> *@
<p>Provide below your Solution!</p>
@* <img src="logoSMI.png" alt="logo image" width="150" height="150" /> *@
    <div class="glassmorphism card-hover">
<EditForm class="form-group" Model="newSolution" OnSubmit="AddSolution">

    <img src="Sample_User_Icon.png" alt="users profile image" width="20" height="20" />
    <label for="user">User</label>
    <InputText class="form-control" @bind-Value="newSolution.Text"> </InputText>



    <button class="buttone primary" type="submit">Add Solution</button>
    
</EditForm>
    </div>
@* <label> <h4>Display all Users Solutions </h4></label> *@
    <h3 style="opacity:0.8">Display all Users Solutions </h3>
<Virtualize Items="displaySolution.ToList()"  Context="solution">
   <li class="card bg-gradient border-3">
            <div class="AllSolutions"
        <div> @solution.Text</div>

            <button class="buttone primary" type="button" @onclick="async () => await Like(solution)">Like</button>
            <span class="like-count">@solution.Likes</span>
            <button class="buttone primary" type="button" @onclick="async () => await Dislike(solution)">Dislike</button>
            <span class="dislike-count">@solution.Dislikes</span>

          
   </div>
   </li>
</Virtualize>

 </div>
@code {

    [Parameter]
    public string IssueId { get; set; }

    private Solution newSolution = new Solution();
    private List<Solution> displaySolution = new List<Solution>();



    private async Task AddSolution()
    {

        newSolution.IssueId = IssueId;
        await SolutionRepository.AddAsync(newSolution);
        await AddSolutionToIssue(IssueId, newSolution.Id.ToString());
        var allSolutions = await SolutionRepository.GetAllAsync();
        displaySolution = allSolutions.ToList();
        newSolution = new Solution();
    }

    private async Task AddSolutionToIssue(string issueId, string solutionId)
    {
        var issue = await IssueRepository.GetByIdAsync(issueId);
        if (issue != null)
        {
            if (issue.Solutions == null)
            {
                issue.Solutions = new List<string>();
            }
            issue.Solutions.Add(solutionId); 
            await IssueRepository.UpdateAsync(issue);
        }
    }


    private async Task  Like(Solution solution)
    {
        solution.Likes++;
        await SolutionRepository.UpdateAsync(solution);
    }

    private async Task  Dislike(Solution solution)
    {
        solution.Dislikes++;
        await SolutionRepository.UpdateAsync(solution);
    }

   }



